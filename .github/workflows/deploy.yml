name: Build & Deploy Spaceweather Watcher

on:
  push:
    branches: [ master ]
    paths:
      - "Dockerfile"
      - "Cargo.toml"
      - "src/**"
      - ".github/workflows/deploy.yml"
  workflow_dispatch:

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}  # ghcr.io/<owner>/<repo>
  CONTAINER_NAME: spaceweather
  APP_DIR: /opt/spaceweather

permissions:
  contents: read
  packages: write   # required to push to GHCR

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push (linux/amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy via SSH to Droplet
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_SSH_USER }}
          key: ${{ secrets.DO_SSH_KEY }}
          script: |
            set -euo pipefail
            IMAGE="${{ env.IMAGE_NAME }}:latest"
            APP_DIR="${{ env.APP_DIR }}"
            CONTAINER="${{ env.CONTAINER_NAME }}"

            mkdir -p "${APP_DIR}"
            cd "${APP_DIR}"

            # write .env from secret
            cat > .env <<'EOF'
            ${{ secrets.ENV_FILE }}
            EOF

            # pull and restart
            docker pull "$IMAGE" || true
            docker rm -f "$CONTAINER" 2>/dev/null || true
            docker run -d \
              --name "$CONTAINER" \
              --env-file "${APP_DIR}/.env" \
              --restart unless-stopped \
              "$IMAGE"

            echo "Waiting for container to initialize..."
            sleep 15

            echo "Checking container logs for startup baseline..."
            if ! docker logs "$CONTAINER" 2>&1 | grep -q "Startup baseline sent"; then
              echo "❌ Health check failed: Startup baseline email not confirmed in logs."
              exit 1
            fi

            echo "✅ Health check passed: Startup baseline detected."
