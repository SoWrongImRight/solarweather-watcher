name: Build & Deploy Spaceweather Watcher

on:
  push:
    branches: [ main ]      # change to [ master ] if that's your default
  workflow_dispatch:

permissions:
  contents: read
  packages: write           # needed to push to GHCR

env:
  CONTAINER_NAME: spaceweather
  APP_DIR: /opt/spaceweather

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set IMAGE_NAME (lowercase)
        run: echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push (linux/amd64)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ env.IMAGE_NAME }}:latest
            ${{ env.IMAGE_NAME }}:${{ github.sha }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Set IMAGE_NAME (lowercase)
        run: echo "IMAGE_NAME=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV

      - name: Deploy via SSH to Droplet
        uses: appleboy/ssh-action@v1.0.3
        env:
          # secrets
          GHCR_PAT: ${{ secrets.GHCR_PAT }}     # optional: needed only if GHCR package is private
          ENV_FILE: ${{ secrets.ENV_FILE }}     # required: your entire .env contents
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_SSH_USER }}  # e.g. "root"
          key: ${{ secrets.DO_SSH_KEY }}        # your private SSH key
          envs: IMAGE_NAME,APP_DIR,CONTAINER_NAME,GHCR_PAT,ENV_FILE
          script: |
            set -euo pipefail

            echo "==> Preparing app directory"
            mkdir -p "$APP_DIR"
            cd "$APP_DIR"

            echo "==> Writing .env from secret"
            cat > .env <<EOF
            $ENV_FILE
            EOF

            # Optional: login to GHCR if package is private
            if [ -n "${GHCR_PAT:-}" ]; then
              echo "==> Logging in to GHCR on droplet"
              echo "$GHCR_PAT" | docker login ghcr.io -u "${GITHUB_ACTOR}" --password-stdin
            else
              echo "==> Skipping GHCR login (no GHCR_PAT provided); ensure package is public"
            fi

            IMAGE="${IMAGE_NAME}:latest"

            echo "==> Pulling image: $IMAGE"
            docker pull "$IMAGE" || true

            echo "==> Recreating container: $CONTAINER_NAME"
            docker rm -f "$CONTAINER_NAME" 2>/dev/null || true
            docker run -d \
              --name "$CONTAINER_NAME" \
              --env-file "$APP_DIR/.env" \
              --restart unless-stopped \
              "$IMAGE"

            echo "==> Waiting for container to report startup..."
            for i in {1..12}; do   # up to ~60s
              if docker logs "$CONTAINER_NAME" 2>&1 | grep -q "Startup baseline sent"; then
                echo "✅ Health check passed: Startup baseline detected."
                break
              fi
              sleep 5
            done
            docker logs "$CONTAINER_NAME" 2>&1 | grep -q "Startup baseline sent" || { echo "❌ Health check failed: no startup baseline found in logs."; exit 1; }

            echo "==> Showing last 50 log lines"
            docker logs --tail 50 "$CONTAINER_NAME" || true
